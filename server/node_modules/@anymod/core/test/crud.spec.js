import nock from "nock";
import Test from "./config/test.utils.js";
import core from "../src/index.js";
const { Singleton, crud } = core;

const scope = {};

describe("CRUD requests", () => {
  beforeAll(() => {
    Singleton.ApiUrl = "https://api.example.com/v2/";
    scope.nock = nock(Singleton.ApiUrl).defaultReplyHeaders({
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Headers":
        "AnyMod-URL,AnyMod-Project,X-Page-Url,X-Tenant-Id",
      "Content-Type": "application/json",
    });
  });

  beforeEach(() => {
    Singleton.Project = "A1B2C3";
    Singleton.External = undefined;
    scope.nock.intercept(/page/, "OPTIONS").reply(200, null);
  });

  afterEach(() => {
    nock.cleanAll();
  });

  describe("crud.get - ", () => {
    it("should use correct headers for AnyMod project", async () => {
      let headers;
      scope.nock.get(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.get();
      expect(headers["anymod-url"]).toEqual(window.location.href);
      expect(headers["anymod-project"]).toEqual(Singleton.Project);
      return Promise.resolve();
    });

    it("should use correct headers for external project (Userfront)", async () => {
      delete Singleton.Project;
      Singleton.External = { project: "b2c3d4e5" };
      let headers;
      scope.nock.get(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.get();
      expect(headers["x-page-url"]).toEqual(window.location.href);
      expect(headers["x-tenant-id"]).toEqual(Singleton.External.project);
      return Promise.resolve();
    });
  });

  describe("crud.post - ", () => {
    it("should use correct headers for AnyMod project", async () => {
      let headers;
      scope.nock.post(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.post();
      expect(headers["anymod-url"]).toEqual(window.location.href);
      expect(headers["anymod-project"]).toEqual(Singleton.Project);
      return Promise.resolve();
    });

    it("should use correct headers for external project (Userfront)", async () => {
      delete Singleton.Project;
      Singleton.External = { project: "b2c3d4e5" };
      let headers;
      scope.nock.post(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.post();
      expect(headers["x-page-url"]).toEqual(window.location.href);
      expect(headers["x-tenant-id"]).toEqual(Singleton.External.project);
      return Promise.resolve();
    });
  });

  describe("crud.put - ", () => {
    it("should use correct headers for AnyMod project", async () => {
      let headers;
      scope.nock.put(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.put();
      expect(headers["anymod-url"]).toEqual(window.location.href);
      expect(headers["anymod-project"]).toEqual(Singleton.Project);
      return Promise.resolve();
    });

    it("should use correct headers for external project (Userfront)", async () => {
      delete Singleton.Project;
      Singleton.External = { project: "b2c3d4e5" };
      let headers;
      scope.nock.put(/page/).reply(200, function (uri, requestBody) {
        headers = this.req.headers;
        return {};
      });
      await crud.put();
      expect(headers["x-page-url"]).toEqual(window.location.href);
      expect(headers["x-tenant-id"]).toEqual(Singleton.External.project);
      return Promise.resolve();
    });
  });
});
