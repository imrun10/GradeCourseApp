// import _ from 'lodash'
import Test from "./config/test.utils.js";
import { mountModAtEl, mount } from "../src/mod.mount.js";
import * as jsFns from "../src/mod.js.js";
import core from "../src/index.js";
const { Singleton } = core;

const scope = {};

const testModMount = ({ mod, localId, document, evaluateJs }) => {
  // Test using current version
  const versionName = Singleton.Version.currentVersion;
  // Should add mod's HTML to body
  expect(document.body.innerHTML).toContain(
    `<div id="anymod-${mod.key}" data-anymod="${localId}" ${
      mod.key
    }="" data-anymod-mounted="">${mod.versions[versionName].html.replace(
      /<\/?div>/g,
      ""
    )}</div>`
  );
  // Should add mod's CSS to head
  expect(document.head.innerHTML).toContain(
    `<style anymod-${mod.key}-live="${versionName}">${mod.versions[versionName].css}</style>`
  );
  // Should call mocked evaluateJs with the proper inputs
  expect(evaluateJs.mock.calls[0][0].hasAttribute(mod.key)).toEqual(true);
  expect(evaluateJs.mock.calls[0][0].id).toEqual("anymod-" + mod.key);
  expect(
    evaluateJs.mock.calls[0][0].hasAttribute("data-anymod-mounted")
  ).toEqual(true);
  expect(evaluateJs.mock.calls[0][1]).toEqual(mod);
  expect(evaluateJs.mock.calls[0][2]).toContain(`${mod.key}-`);
  expect(evaluateJs.mock.calls[0][3]).toEqual(false);
};

describe("mount", () => {
  beforeAll(() => {
    Test.fns.defineSingleton();
    scope.plain1 = Test.factories.mods.buildPlainWithEid("plain1");
    document.head.innerHTML = Test.factories.document.headInnerHtml;
    document.body.innerHTML = `<div id="anymod-${scope.plain1.key}" data-key="${scope.plain1.key}"></div>`;
    jsFns.evaluateJs = jest.fn();
  });

  it("should mount a single mod to a single el based on data-key", () => {
    mount(scope.plain1);
    testModMount({
      document,
      mod: scope.plain1,
      localId: jsFns.evaluateJs.mock.calls[0][2],
      evaluateJs: jsFns.evaluateJs,
    });
  });

  it("should mount a single mod to multiple els based on data-key", () => {
    scope.plain2 = Test.factories.mods.buildPlainWithEid("plain2");
    jsFns.evaluateJs = jest.fn();
    document.body.innerHTML += `
      <div id="anymod-${scope.plain2.key}" data-key="${scope.plain2.key}"></div>
      <div id="anymod-blank" data-key="${scope.plain2.key}"></div>
    `;
    mount(scope.plain2);
    testModMount({
      document,
      mod: scope.plain2,
      localId: jsFns.evaluateJs.mock.calls[0][2],
      evaluateJs: jsFns.evaluateJs,
    });
  });

  it("should mount a single mod to a single el based on data-key with non-default version", () => {
    Singleton.Version.currentVersion = "v2";
    scope.version2 = Test.factories.mods.buildPlainWithEid("version2");
    jsFns.evaluateJs = jest.fn();
    document.body.innerHTML += `
      <div id="anymod-${scope.version2.key}" data-key="${scope.version2.key}"></div>
      <div id="anymod-blank" data-key="${scope.version2.key}"></div>
    `;
    mount(scope.version2);
    testModMount({
      document,
      mod: scope.version2,
      localId: jsFns.evaluateJs.mock.calls[0][2],
      evaluateJs: jsFns.evaluateJs,
    });
  });
});

describe("mountModAtEl", () => {
  describe("when calling on a mod and el", () => {
    beforeAll(() => {
      Test.fns.defineSingleton();
      document.head.innerHTML = Test.factories.document.headInnerHtml;
      document.body.innerHTML = '<div id="anymod-basic"></div>';
      Singleton.Page.page = Test.factories.pages.basic;
      jsFns.evaluateJs = jest.fn();
      mountModAtEl(
        Test.factories.mods.basic,
        document.getElementById("anymod-" + Test.factories.mods.basic.key)
      );
      scope.mockCall = jsFns.evaluateJs.mock.calls[0];
      scope.localId = scope.mockCall[2];
    });

    it("should add mod's HTML to <body>", () => {
      expect(document.body.innerHTML).toContain(
        `<div id="anymod-${Test.factories.mods.basic.key}" data-anymod="${
          scope.localId
        }" ${
          Test.factories.mods.basic.key
        }="" data-anymod-mounted="">${Test.factories.mods.basic.html.replace(
          /<\/?div>/g,
          ""
        )}</div>`
      );
    });

    it("should add mod's CSS to <head>", () => {
      expect(document.head.innerHTML).toContain(
        '<style anymod-basic-live="default">' +
          Test.factories.mods.basic.css +
          "</style>"
      );
    });

    it("should call evaluateJs with (el, mod, localId, false)", () => {
      expect(scope.mockCall[0].hasAttribute("basic")).toEqual(true);
      expect(scope.mockCall[0].id).toEqual("anymod-basic");
      expect(scope.mockCall[0].hasAttribute("data-anymod-mounted")).toEqual(
        true
      );
      expect(scope.mockCall[1]).toEqual(Test.factories.mods.basic);
      expect(scope.mockCall[2]).toContain("basic-");
      expect(scope.mockCall[3]).toEqual(false);
    });

    it("should not add mod's CSS asset to <head> (should be done by loadPageAssets)", () => {
      expect(document.head.innerHTML).not.toContain(
        Test.factories.mods.basic.cssAssets[0]
      );
    });

    it("should not add mod's JS asset to <head> (should be done by loadPageAssets)", () => {
      expect(document.head.innerHTML).not.toContain(
        Test.factories.mods.basic.jsAssets[0]
      );
    });
  });

  describe("when calling more than once", () => {
    beforeAll(() => {
      Test.fns.defineSingleton();
      document.body.innerHTML = `
        <section>
          <div id="anymod-basic"></div>
          <p>Filler</p>
          <div id="anymod-plaincss"></div>
        </section>`;
      Singleton.Page.page = {
        mods: {
          basic: Test.factories.mods.basic,
          plaincss: Test.factories.mods.plaincss,
        },
      };
      jsFns.evaluateJs = jest.fn();
      mountModAtEl(
        Test.factories.mods.basic,
        document.getElementById("anymod-" + Test.factories.mods.basic.key)
      );
      mountModAtEl(
        Test.factories.mods.plaincss,
        document.getElementById("anymod-" + Test.factories.mods.plaincss.key)
      );
      scope.mockCall0 = jsFns.evaluateJs.mock.calls[0];
      scope.localId0 = scope.mockCall0[2];
      scope.mockCall1 = jsFns.evaluateJs.mock.calls[1];
      scope.localId1 = scope.mockCall1[2];
    });

    it("should add both mods' HTML to <body>", () => {
      expect(document.body.innerHTML).toContain(
        `<div id="anymod-${Test.factories.mods.basic.key}" data-anymod="${
          scope.localId0
        }" ${
          Test.factories.mods.basic.key
        }="" data-anymod-mounted="">${Test.factories.mods.basic.html.replace(
          /<\/?div>/g,
          ""
        )}</div>`
      );
      expect(document.body.innerHTML).toContain(
        `<div id="anymod-${Test.factories.mods.plaincss.key}" data-anymod="${
          scope.localId1
        }" ${
          Test.factories.mods.plaincss.key
        }="" data-anymod-mounted="">${Test.factories.mods.plaincss.html.replace(
          /<\/?div>/g,
          ""
        )}</div>`
      );
    });

    it("should add both mods' CSS to <head>", () => {
      expect(document.head.innerHTML).toContain(
        `<style anymod-${Test.factories.mods.basic.key}-live="default">${Test.factories.mods.basic.css}</style>`
      );
      expect(document.head.innerHTML).toContain(
        `<style anymod-${Test.factories.mods.plaincss.key}-live="default">${Test.factories.mods.plaincss.css}</style>`
      );
    });

    it("should call evaluateJs for both mods", () => {
      expect(scope.mockCall0[0].id).toEqual("anymod-basic");
      expect(scope.mockCall1[0].id).toEqual("anymod-plaincss");
    });
  });

  describe("when calling with a non-default version", () => {
    beforeAll(() => {
      Test.fns.defineSingleton();
      Singleton.Version.currentVersion = "v2";
      scope.ver2 = Test.factories.mods.buildPlainWithEid("ver2");
      document.body.innerHTML = `
        <section>
          <div id="anymod-ver2"></div>
          <p>Filler</p>
          <div id="anymod-plaincss"></div>
        </section>`;
      Singleton.Page.page = {
        mods: {
          ver2: scope.ver2,
          plaincss: Test.factories.mods.plaincss,
        },
      };
      jsFns.evaluateJs = jest.fn();
      mountModAtEl(
        scope.ver2,
        document.getElementById("anymod-" + scope.ver2.key)
      );
      mountModAtEl(
        Test.factories.mods.plaincss,
        document.getElementById("anymod-" + Test.factories.mods.plaincss.key)
      );
      scope.mockCall0 = jsFns.evaluateJs.mock.calls[0];
      scope.localId0 = scope.mockCall0[2];
      scope.mockCall1 = jsFns.evaluateJs.mock.calls[1];
      scope.localId1 = scope.mockCall1[2];
    });

    it("should add both mods' HTML to <body>", () => {
      expect(document.body.innerHTML).toContain(
        `<div id="anymod-${scope.ver2.key}" data-anymod="${scope.localId0}" ${
          scope.ver2.key
        }="" data-anymod-mounted="">${scope.ver2.versions.v2.html.replace(
          /<\/?div>/g,
          ""
        )}</div>`
      );
      expect(document.body.innerHTML).toContain(
        `<div id="anymod-${Test.factories.mods.plaincss.key}" data-anymod="${
          scope.localId1
        }" ${
          Test.factories.mods.plaincss.key
        }="" data-anymod-mounted="">${Test.factories.mods.plaincss.versions.v2.html.replace(
          /<\/?div>/g,
          ""
        )}</div>`
      );
    });

    it("should add both mods' CSS to <head>", () => {
      expect(document.head.innerHTML).toContain(
        `<style anymod-${scope.ver2.key}-live="v2">${scope.ver2.versions.v2.css}</style>`
      );
      expect(document.head.innerHTML).toContain(
        `<style anymod-${Test.factories.mods.plaincss.key}-live="v2">${Test.factories.mods.plaincss.versions.v2.css}</style>`
      );
    });

    it("should call evaluateJs for both mods", () => {
      expect(scope.mockCall0[0].id).toEqual("anymod-ver2");
      expect(scope.mockCall1[0].id).toEqual("anymod-plaincss");
    });
  });
});
