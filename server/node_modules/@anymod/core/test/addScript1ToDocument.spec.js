import Test from "./config/test.utils.js";
import core from "../src/index.js";
const { Singleton, addScript1ToDocument } = core;

describe("addScript1ToDocument", () => {
  beforeAll(() => {
    Test.fns.defineSingleton();
    document.head.innerHTML = `
<meta charset="utf-8">
<meta name="referrer" content="none">
<title>AnyMod</title>
<script src="https://example.com/script.js"></script>`;
    document.body.innerHTML =
      '<script src="https://somescript.com/script.js"></script>';
  });

  it("should add the script to the head if another script is there", async () => {
    const cdnUrl = "https://my-custom-cdn.com/v5/";
    const identifier = "AAA999";
    const path = "/random";
    const cb = jest.fn();

    // Navigate to page
    window.history.pushState({}, "Random page", path);

    // Execute addScript1ToDocument
    await addScript1ToDocument(cdnUrl, identifier, cb);

    // Page should have snippet in head with correct values
    const firstScriptInHead = document.head.getElementsByTagName("script")[0];
    expect(firstScriptInHead.src).toContain(
      `${cdnUrl}${identifier}/${encodeURIComponent(
        btoa(path)
      )}/${encodeURIComponent(btoa("example.com"))}?t=`
    );

    // Should set isScript1Loading status indicator
    expect(Singleton.isScript1Loading).toEqual(true);

    // Mock the script onload event
    const el = document.querySelector(`script[src^="${cdnUrl}"]`);
    el.onload();

    // After the script loads, should update the status indicator
    expect(Singleton.isScript1Loading).toEqual(false);

    // Should have fired the callback
    expect(cb).toHaveBeenCalled();
  });

  it("should add the script to the head if no script is present in the head", async () => {
    document.head.innerHTML = `
<meta charset="utf-8">
<meta name="referrer" content="none">
<title>AnyMod</title>`;
    const cdnUrl = "https://another-cdn.com/v0/";
    const identifier = "BBB999";
    const path = "/another";

    expect(document.body.getElementsByTagName("script").length).toEqual(1);

    // Navigate to page
    window.history.pushState({}, "Another page", path);

    // Execute addScript1ToDocument
    await addScript1ToDocument(cdnUrl, identifier);

    // Page should have snippet in head with correct values
    const firstScriptInHead = document.head.getElementsByTagName("script")[0];
    expect(firstScriptInHead).toBeTruthy();
    expect(firstScriptInHead.src).toContain(
      `${cdnUrl}${identifier}/${encodeURIComponent(
        btoa(path)
      )}/${encodeURIComponent(btoa("example.com"))}?t=`
    );

    // Body should not receive another script
    expect(document.body.getElementsByTagName("script").length).toEqual(1);
  });

  it("should not add the script if it is already present in the head", async () => {
    const cdnUrl = "https://third-cdn.com/v0/";
    const identifier = "CCC999";
    const path = "/third";
    const date = Date.now();

    document.head.innerHTML = `
<meta charset="utf-8">
<meta name="referrer" content="none">
<title>AnyMod</title>
<script src="${cdnUrl}${identifier}/${encodeURIComponent(
      btoa(path)
    )}/${encodeURIComponent(btoa("example.com"))}?t=${date}"></script>`;

    const numberOfScriptsInHead = document.head.getElementsByTagName("script")
      .length;

    // Navigate to page
    window.history.pushState({}, "Third page", path);

    // Execute addScript1ToDocument
    await addScript1ToDocument(cdnUrl, identifier);

    // Should not have added another script
    expect(document.head.getElementsByTagName("script").length).toEqual(
      numberOfScriptsInHead
    );
  });
});
