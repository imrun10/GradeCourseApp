import Test from "./config/test.utils.js";
import core from "../src/index.js";
const { Singleton, createOrReturnPage, crud } = core;

describe("createOrReturnPage", () => {
  beforeAll(() => {
    Test.fns.defineSingleton();
    document.head.innerHTML = Test.factories.document.headInnerHtml;
    Singleton.Page.page = Test.factories.pages.basic;
    Singleton.Opts.api = true;
    Singleton.ApiUrl = "https://example.com/";
  });

  it("should return a page if it is already set", async () => {
    window.history.pushState({}, "Basic page", "/basic");
    const page = await createOrReturnPage();
    expect(page.id).toBe(1);
    expect(page.mods).toEqual({
      basic: Test.factories.mods.basic,
      assetboth: Test.factories.mods.assetboth,
    });
  });

  it("should find or create a new page if a new mod is found but the page does not match URL", async () => {
    const nextPage = {
      id: 99,
      host: "example.com",
      pathname: "/next-page.html",
      mods: { basic: Test.factories.mods.basic },
    };
    crud.post = jest.fn(() => Promise.resolve(nextPage));

    // Navigate to next page
    window.history.pushState({}, "Next page", nextPage.pathname);

    // Add new mod to the page
    let newMod = document.createElement("div");
    newMod.id = "anymod-basic";
    document.body.appendChild(newMod);
    // Execute createOrReturnPage
    const page = await createOrReturnPage();

    // Correct page should be returned
    expect(crud.post).toHaveBeenCalledWith(["basic"]);
    expect(page.id).toBe(nextPage.id);
    expect(page.pathname).toBe(nextPage.pathname);
    expect(Singleton.Page.priorPages[0]).toEqual(nextPage);
  });

  it("should use a prior page if one matches the URL", async () => {
    const priorPage = {
      id: 100,
      host: "example.com",
      pathname: "/prior-page.html",
      mods: { basic: Test.factories.mods.basic },
    };
    crud.post = jest.fn();
    Singleton.Page.priorPages = [priorPage];
    window.history.pushState({}, "Prior page", priorPage.pathname);
    let newMod = document.createElement("div");
    newMod.id = "anymod-basic";
    document.body.appendChild(newMod);
    const page = await createOrReturnPage();
    expect(crud.post).not.toHaveBeenCalled();
    expect(page.id).toBe(priorPage.id);
    expect(page.pathname).toBe(priorPage.pathname);
  });

  it("should work properly even if the Page object is not set", async () => {
    // Reset page body
    document.body.innerHTML = "";

    const anotherPage = {
      id: 101,
      host: "example.com",
      pathname: "/another-page.html",
      mods: {
        assetboth: Test.factories.mods.assetboth,
      },
    };
    crud.post = jest.fn(() => Promise.resolve(anotherPage));

    // Navigate to next page
    window.history.pushState({}, "Another page", anotherPage.pathname);
    Singleton.Page = {};

    // Add new mod to the page
    let newMod = document.createElement("div");
    newMod.id = "anymod-assetboth";
    document.body.appendChild(newMod);

    // Execute createOrReturnPage
    const page = await createOrReturnPage();

    // Correct page should be returned
    expect(crud.post).toHaveBeenCalledWith(["assetboth"]);
    expect(page.id).toBe(anotherPage.id);
    expect(page.pathname).toBe(anotherPage.pathname);
    expect(Singleton.Page.priorPages[0]).toEqual(anotherPage);
  });

  it("should use existing window.AnyModPageJs if relevant", async () => {
    const mod = Test.factories.mods.assetjs;

    // Reset page head & body
    document.head.innerHTML = Test.factories.document.headInnerHtml;
    document.body.innerHTML = `<div id="anymod-${mod.key}"></div>`;
    Singleton.Page = {};

    const page = {
      id: 33,
      host: "example.com",
      pathname: "/existing-page.html",
      mods: {
        assetjs: mod,
      },
    };
    crud.post = jest.fn(() => Promise.resolve({}));

    window.AnyModPageJs = {
      page: {
        id: page.id,
        cssAssets: mod.cssAssets,
        jsAssets: mod.jsAssets,
        mods: page.mods,
        explicitKeys: [mod.key],
        implicitKeys: [],
        errorMessages: {},
        host: page.host,
        pathname: page.pathname,
      },
    };

    // Navigate to existing page
    window.history.pushState({}, "Existing page", page.pathname);

    // Execute createOrReturnPage
    const returnedPage = await createOrReturnPage();

    // Expect the correct page to have been returned
    expect(returnedPage.id).toBe(page.id);
    expect(returnedPage.pathname).toBe(page.pathname);
    expect(crud.post).not.toHaveBeenCalled();
  });

  it("should not use existing window.AnyModPageJs if not relevant", async () => {
    const mod = Test.factories.mods.assetjs;

    // Reset page head & body
    document.head.innerHTML = Test.factories.document.headInnerHtml;
    document.body.innerHTML = `<div id="anymod-${mod.key}"></div>`;
    Singleton.Page = {};

    const page = {
      id: 33,
      host: "example.com",
      pathname: "/about-page",
      mods: {
        assetjs: mod,
      },
    };
    crud.post = jest.fn(() => Promise.resolve(page));

    // Page is a different page (pathname does not match)
    window.AnyModPageJs = {
      page: {
        id: 44,
        cssAssets: mod.cssAssets,
        jsAssets: mod.jsAssets,
        mods: page.mods,
        explicitKeys: [mod.key],
        implicitKeys: [],
        errorMessages: {},
        host: page.host,
        pathname: "/different-page",
      },
    };

    // Navigate to existing page
    window.history.pushState({}, "About page", page.pathname);

    // Execute createOrReturnPage
    const returnedPage = await createOrReturnPage();

    // Expect the correct page to have been returned via POST
    expect(crud.post).toHaveBeenCalledWith([mod.key]);
    expect(returnedPage.id).toBe(page.id);
    expect(returnedPage.pathname).toBe(page.pathname);
  });
});
