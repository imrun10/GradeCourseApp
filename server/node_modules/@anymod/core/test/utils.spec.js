import Test from "./config/test.utils.js";
import utils from "../src/utils.js";
import { mount } from "../src/mod.mount.js";
import core from "../src/index.js";
const { Singleton } = core;

let scriptTag, styleTag;

/**
 * Tests to verify that JS and CSS assets load properly based on included mods
 */
describe("loadPageAssets", () => {
  beforeEach(() => {
    jest.useFakeTimers();
    Test.fns.defineSingleton();
    document.head.innerHTML = Test.factories.document.headInnerHtml;
    document.body.innerHTML = "";
    scriptTag = document.getElementById("AnyMod-script");
    styleTag = document.querySelector("[anymod-styles]");
  });

  describe("should run callback for each mod", () => {
    it("For plain HTML mod", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      Singleton.Opts.priority = [Test.factories.mods.plainhtml.key];
      utils.loadPageAssets(
        {
          mods: { plainhtml: Test.factories.mods.plainhtml },
        },
        { modCb, overallCb, scriptTag, styleTag }
      );
      jest.runAllTimers();
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.plainhtml);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For plain CSS mod", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      utils.loadPageAssets(
        {
          mods: { plaincss: Test.factories.mods.plaincss },
        },
        { scriptTag, styleTag, modCb, overallCb }
      );
      jest.runAllTimers();
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.plaincss);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For plain JS mod", (done) => {
      const modCb = jest.fn();
      const overallCb = jest.fn();
      utils.loadPageAssets(
        {
          mods: { plainjs: Test.factories.mods.plainjs },
        },
        { modCb, overallCb, scriptTag, styleTag }
      );
      jest.runAllTimers();
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.plainjs);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For a mod with a CSS asset", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      Singleton.Opts.priority = [Test.factories.mods.assetcss.key];
      utils.loadPageAssets(
        {
          mods: { assetcss: Test.factories.mods.assetcss },
        },
        { modCb, overallCb, scriptTag, styleTag }
      );
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.assetcss);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For a mod with a JS asset", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      document.body.innerHTML = `<div id="anymod-${Test.factories.mods.assetjs.key}"></div>`;
      utils.loadPageAssets(
        {
          mods: { assetjs: Test.factories.mods.assetjs },
        },
        { modCb, overallCb, scriptTag, styleTag }
      );
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.assetjs);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For a mod with both CSS & JS assets", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      document.body.innerHTML = `<div id="anymod-${Test.factories.mods.assetboth.key}"></div>`;
      utils.loadPageAssets(
        {
          mods: { assetboth: Test.factories.mods.assetboth },
        },
        { modCb, overallCb, scriptTag, styleTag }
      );
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(Test.factories.mods.assetboth);
      expect(overallCb).toHaveBeenCalled();
      done();
    });

    it("For multiple mods, 4 of which are priority", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn(),
        opts = { modCb, overallCb, scriptTag, styleTag, parent: {} },
        mods = {
          assetboth: Test.factories.mods.assetboth, // Priority + has both CSS & JS assets
          plainhtml: Test.factories.mods.plainhtml, // Priority + has no assets
          assetcss: Test.factories.mods.assetcss, // Priority + has CSS asset
          assetjs: Test.factories.mods.assetjs, // Priority + has JS asset
          plainhtml2: Test.factories.mods.buildPlainWithEid("plainhtml2"), // Not priority + has no assets
          assetboth2: Test.factories.mods.buildBasicWithEid("assetboth2"), // Not priority + has both CSS & JS assets
        };
      Singleton.Opts.priority = [
        mods.assetboth.key,
        mods.plainhtml.key,
        mods.assetcss.key,
        mods.assetjs.key,
      ];
      // Priority mods without assets should be called
      utils.loadPageAssets({ mods }, opts);
      expect(modCb).toHaveBeenCalledWith(mods.plainhtml);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetcss]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).not.toContainEqual([mods.plainhtml2]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth2]);
      expect(opts.parent.tracking.modsWithRemainingAssets).toHaveLength(3); // 3 remaining priority
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(overallCb).not.toHaveBeenCalled();
      // Priority mods with CSS only should be called
      Test.fns.fireAllLinkOnloads(document);
      expect(modCb.mock.calls).toContainEqual([mods.plainhtml]);
      expect(modCb.mock.calls).toContainEqual([mods.assetcss]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth]);
      expect(modCb.mock.calls).not.toContainEqual([mods.plainhtml2]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth2]);
      expect(opts.parent.tracking.modsWithRemainingAssets).toHaveLength(2); // 2 remaining priority
      expect(modCb).toHaveBeenCalledTimes(2);
      expect(overallCb).not.toHaveBeenCalled();
      // Priority mods with JS should be called
      Test.fns.fireAllScriptOnloads(document);
      expect(modCb.mock.calls).toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).toContainEqual([mods.assetboth]);
      expect(modCb.mock.calls).not.toContainEqual([mods.plainhtml2]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth2]);
      expect(opts.parent.tracking.modsWithRemainingAssets).toHaveLength(0); // No remaining priority
      expect(modCb).toHaveBeenCalledTimes(4);
      expect(overallCb).not.toHaveBeenCalled();
      // Non priority mods without assets should be called
      jest.runAllTimers();
      expect(modCb.mock.calls).toContainEqual([mods.plainhtml2]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth2]);
      expect(overallCb).not.toHaveBeenCalled();
      expect(opts.parent.tracking.modsWithRemainingAssets).toHaveLength(1); // 1 remaining non-priority
      // Non priority mods with assets should be called
      Test.fns.fireAllOnloads(document);
      expect(modCb.mock.calls).toContainEqual([mods.assetboth2]);
      expect(opts.parent.tracking.modsWithRemainingAssets).toHaveLength(0); // No remaining non-priority
      expect(overallCb).toHaveBeenCalledTimes(1);
      done();
    });
  });

  describe("when called a second time", () => {
    beforeEach(() => {
      jest.useFakeTimers();
      Test.fns.defineSingleton();
      document.head.innerHTML = Test.factories.document.headInnerHtml;
      document.body.innerHTML = "";
      scriptTag = document.getElementById("AnyMod-script");
      styleTag = document.querySelector("[anymod-styles]");
    });

    it("after mod has mounted", (done) => {
      const modCb = jest.fn();
      const overallCb = jest.fn();
      const opts = { modCb, overallCb, scriptTag, styleTag, parent: {} };
      const mods = {
        assetboth: Test.factories.mods.assetboth, // Has both CSS & JS assets
        plainhtml: Test.factories.mods.plainhtml, // Has no assets
        assetcss: Test.factories.mods.assetcss, // Has CSS asset
        assetjs: Test.factories.mods.assetjs, // Has JS asset
      };
      Singleton.Opts.priority = [
        mods.assetboth.key,
        mods.plainhtml.key,
        mods.assetcss.key,
        mods.assetjs.key,
      ];
      utils.loadPageAssets({ mods }, opts);
      Test.fns.fireAllOnloads(document);
      expect(overallCb).toHaveBeenCalledTimes(1);
      utils.loadPageAssets({ mods }, opts);
      jest.runAllTimers();
      expect(opts.parent.tracking.modsWithRemainingAssets).toEqual([]);
      expect(overallCb).toHaveBeenCalledTimes(2);
      done();
    });

    fit("when called a second time, before a mod has mounted", (done) => {
      const modCb = jest.fn();
      const overallCb = jest.fn();
      const opts = { modCb, overallCb, scriptTag, styleTag, parent: {} };
      const mods = {
        assetboth: Test.factories.mods.assetboth, // Has both CSS & JS assets
        assetcss: Test.factories.mods.assetcss, // Has CSS asset
        assetjs: Test.factories.mods.assetjs, // Has JS asset
      };
      Singleton.Opts.priority = [
        mods.assetboth.key,
        mods.assetcss.key,
        mods.assetjs.key,
      ];
      utils.loadPageAssets({ mods }, opts);
      expect(modCb).not.toHaveBeenCalled();
      expect(overallCb).not.toHaveBeenCalled();
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetboth.jsAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetcss.cssAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetjs.jsAssets[0]
      );
      const overallCb2 = jest.fn();
      opts.overallCb = overallCb2;
      utils.loadPageAssets({ mods }, opts);
      expect(modCb).not.toHaveBeenCalled();
      expect(overallCb).not.toHaveBeenCalled();
      expect(overallCb2).not.toHaveBeenCalled();
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetboth.jsAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetcss.cssAssets[0]
      );
      expect(opts.parent.tracking.queuedAssets).toContain(
        mods.assetjs.jsAssets[0]
      );
      Test.fns.fireAllOnloads(document);
      expect(opts.parent.tracking.queuedAssets).toEqual([]);
      expect(opts.parent.tracking.modsWithRemainingAssets).toEqual([]);
      expect(modCb).toHaveBeenCalledTimes(3);
      expect(overallCb).toHaveBeenCalledTimes(1);
      /* TODO
       * 2nd overall callback not called (but should be).
       * Need to add a global callback queue that works across multiple loadPageAssets calls
       * across both script1 and script1 (e.g. Singleton.callbackQueue).
       */
      // expect(overallCb2).toHaveBeenCalledTimes(1)
      done();
    });

    it("with no mods", (done) => {
      const modCb = jest.fn(),
        overallCb = jest.fn();
      utils.loadPageAssets(
        { mods: {} },
        { modCb, overallCb, scriptTag, styleTag }
      );
      jest.runAllTimers();
      expect(overallCb).toHaveBeenCalled();
      done();
    });
  });

  describe("should add style tags to document head (not body)", () => {
    it("when AnyMod-script is added to body", (done) => {
      document.head.innerHTML = `
        <meta charset="utf-8">
        <meta name="referrer" content="none">
        <title>AnyMod</title>
        <style anymod-styles></style>
      `;
      document.body.innerHTML = `
        <div id="anymod-basic"></div>

        <!-- AnyMod -->
        <script id="AnyMod-script">
          (function (m,o,d,u,l,a,r,i,z,e) {
            u[m]={Project:o,rq:[],Opts:r,ready:function(j){u[m].rq.push(j)}};function j(s){return encodeURIComponent(btoa(s))};z=l.getElementById(m+'-'+a);r=u.location;
            e=[d+'/page/'+o+'/'+j(r.pathname)+'/'+j(r.host)+'?t='+Date.now(),d];e.map(function(w){i=l.createElement(a);i.defer=1;i.src=w;z.parentNode.insertBefore(i,z);});
          })('AnyMod','BASIC1','https://cdn.anymod.com/v2',window,document,'script',{});
        </script>
        <!-- /AnyMod -->`;
      const modCb = jest.fn(),
        overallCb = jest.fn();
      scriptTag = document.getElementById("AnyMod-script");
      styleTag = document.querySelector("[anymod-styles]");
      utils.loadPageAssets(Test.factories.pages.basic, {
        modCb,
        overallCb,
        scriptTag,
        styleTag,
      });
      Test.fns.fireAllOnloads(document);
      expect(document.body.innerHTML).not.toContain(
        Test.factories.mods.basic.cssAssets[0]
      );
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.basic.cssAssets[0]
      );
      done();
    });
  });

  describe("should prioritize first 3 mods (if no priority set)", () => {
    it("should load CSS & JS for first 3 into head, then remaining into head (CSS) + body (JS)", (done) => {
      document.body.innerHTML = `
        <div id="anymod-basic"></div>
        <div id="anymod-assetcss"></div>
        <div id="anymod-assetjs"></div>
        <div id="anymod-assetboth2"></div>
      `;
      const modCb = jest.fn(),
        overallCb = jest.fn();
      scriptTag = document.getElementById("AnyMod-script");
      styleTag = document.querySelector("[anymod-styles]");
      utils.loadPageAssets(
        Test.factories.makePage([
          Test.factories.mods.basic,
          Test.factories.mods.assetcss,
          Test.factories.mods.assetjs,
          Test.factories.mods.assetboth2,
        ]),
        { modCb, overallCb, scriptTag, styleTag }
      );
      // Check CSS
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.basic.cssAssets[0]
      );
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.assetcss.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(
        Test.factories.mods.assetboth2.cssAssets[0]
      );
      expect(document.body.innerHTML).not.toContain(
        Test.factories.mods.assetboth2.cssAssets[0]
      );
      // Check JS
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.basic.jsAssets[0]
      );
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.assetjs.jsAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(
        Test.factories.mods.assetboth2.jsAssets[0]
      );
      expect(document.body.innerHTML).not.toContain(
        Test.factories.mods.assetboth2.jsAssets[0]
      );
      // Check callback
      expect(overallCb).not.toHaveBeenCalled();
      // Fire onload for all pending assets
      Test.fns.fireAllOnloads(document);
      // Re-check CSS (should have 4th mod in HEAD now)
      expect(document.head.innerHTML).toContain(
        Test.factories.mods.assetboth2.cssAssets[0]
      );
      // Re-check JS (should have 4th mod in BODY now)
      expect(document.body.innerHTML).toContain(
        Test.factories.mods.assetboth2.jsAssets[0]
      );
      // Final callback called after last assets load
      expect(overallCb).not.toHaveBeenCalled();
      Test.fns.fireAllOnloads(document);
      expect(overallCb).toHaveBeenCalled();
      done();
    });
  });

  describe("should prioritize with AnyMod.Opts.priority = n", () => {
    it("should load CSS & JS for priority into head, then remaining into head (CSS) + body (JS)", (done) => {
      document.body.innerHTML = `
        <div id="anymod-basic"></div>
        <div id="anymod-assetcss"></div>
        <div id="anymod-assetjs"></div>
        <div id="anymod-assetboth"></div>
      `;
      Singleton.Opts.priority = 1;
      const modCb = jest.fn(),
        overallCb = jest.fn(),
        mods = {
          basic: Test.factories.mods.basic, // Priority because it's first (n = 1)
          assetcss: Test.factories.mods.assetcss,
          assetjs: Test.factories.mods.assetjs,
          assetboth: Test.factories.mods.assetboth,
        };
      // Should add priority CSS & JS assets to head (and do nothing else)
      utils.loadPageAssets({ mods }, { modCb, overallCb, scriptTag, styleTag });
      expect(document.head.innerHTML).toContain(mods.basic.cssAssets[0]);
      expect(document.head.innerHTML).toContain(mods.basic.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(modCb).not.toHaveBeenCalled();
      expect(overallCb).not.toHaveBeenCalled();
      // Firing onload should mount priority mod, then add non-priority assets: CSS to head; JS to body
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledWith(mods.basic);
      expect(document.head.innerHTML).toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).toContain(mods.assetboth.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetboth.jsAssets[0]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetcss]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth]);
      expect(overallCb).not.toHaveBeenCalled();
      // Firing onload should mount non-priority mods, then call overall callback
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledWith(mods.assetcss);
      expect(modCb).toHaveBeenCalledWith(mods.assetjs);
      expect(modCb).toHaveBeenCalledWith(mods.assetboth);
      expect(overallCb).toHaveBeenCalled();
      done();
    });
  });

  describe("should prioritize with Singleton.Opts.priority = [not 1st mod]", () => {
    it("should load CSS & JS for priority into head, then remaining into head (CSS) + body (JS)", (done) => {
      document.body.innerHTML = `
        <div id="anymod-assetcss"></div>
        <div id="anymod-assetjs"></div>
        <div id="anymod-basic"></div>
        <div id="anymod-assetboth"></div>
      `;
      Singleton.Opts.priority = ["basic"];
      const modCb = jest.fn(),
        overallCb = jest.fn(),
        mods = {
          basic: Test.factories.mods.basic, // Priority because it's first (n = 1)
          assetcss: Test.factories.mods.assetcss,
          assetjs: Test.factories.mods.assetjs,
          assetboth: Test.factories.mods.assetboth,
        };
      // Should add priority CSS & JS assets to head (and do nothing else)
      utils.loadPageAssets({ mods }, { modCb, overallCb, scriptTag, styleTag });
      expect(document.head.innerHTML).toContain(mods.basic.cssAssets[0]);
      expect(document.head.innerHTML).toContain(mods.basic.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(modCb).not.toHaveBeenCalled();
      expect(overallCb).not.toHaveBeenCalled();
      // Firing onload should mount priority mod, then add non-priority assets: CSS to head; JS to body
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledWith(mods.basic);
      expect(document.head.innerHTML).toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).toContain(mods.assetboth.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetboth.jsAssets[0]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetcss]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth]);
      expect(overallCb).not.toHaveBeenCalled();
      // Firing onload should mount non-priority mods, then call overall callback
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledWith(mods.assetcss);
      expect(modCb).toHaveBeenCalledWith(mods.assetjs);
      expect(modCb).toHaveBeenCalledWith(mods.assetboth);
      expect(overallCb).toHaveBeenCalled();
      done();
    });
  });

  describe("should work with priorityOnly call", () => {
    it("as called in script1", (done) => {
      document.body.innerHTML = `
        <div id="anymod-assetcss"></div>
        <div id="anymod-assetjs"></div>
        <div id="anymod-basic"></div>
        <div id="anymod-assetboth"></div>
      `;
      Singleton.Opts.priority = ["basic"];
      const preloadMockFn = jest.fn();
      const modCb = jest.fn();
      const overallCb = jest.fn();
      const mods = {
        basic: Test.factories.mods.basic, // Priority as specified
        assetcss: Test.factories.mods.assetcss,
        assetjs: Test.factories.mods.assetjs,
        assetboth: Test.factories.mods.assetboth,
      };
      const Page = { mods };
      // Should add priority CSS & JS assets to head (and do nothing else)
      utils.loadPageAssets(Page, {
        priorityOnly: true,
        modCb: undefined,
        overallCb: preloadMockFn,
        scriptTag,
        styleTag,
        parent: Page,
      });
      Test.fns.fireAllOnloads(document);
      expect(document.head.innerHTML).toContain(mods.basic.cssAssets[0]);
      expect(document.head.innerHTML).toContain(mods.basic.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(preloadMockFn).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledTimes(0);
      utils.loadPageAssets(Page, {
        modCb,
        overallCb,
        scriptTag,
        styleTag,
        parent: Page,
      });
      // Running again should mount priority mod, then add non-priority assets: CSS to head; JS to body
      expect(modCb).toHaveBeenCalledTimes(1);
      expect(modCb).toHaveBeenCalledWith(mods.basic);
      jest.runAllTimers();
      expect(document.head.innerHTML).toContain(mods.assetcss.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.assetjs.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).toContain(mods.assetboth.cssAssets[0]);
      expect(document.body.innerHTML).not.toContain(
        mods.assetboth.cssAssets[0]
      );
      expect(document.head.innerHTML).not.toContain(mods.assetboth.jsAssets[0]);
      expect(document.body.innerHTML).toContain(mods.assetboth.jsAssets[0]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetcss]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetjs]);
      expect(modCb.mock.calls).not.toContainEqual([mods.assetboth]);
      expect(overallCb).not.toHaveBeenCalled();
      // Firing onload should mount non-priority mods, then call overall callback
      Test.fns.fireAllOnloads(document);
      expect(modCb).toHaveBeenCalledWith(mods.assetcss);
      expect(modCb).toHaveBeenCalledWith(mods.assetjs);
      expect(modCb).toHaveBeenCalledWith(mods.assetboth);
      expect(overallCb).toHaveBeenCalled();
      done();
    });
  });

  describe("should not leave mods cloaked", () => {
    beforeAll(() => {
      document.body.innerHTML = `
        <div id="anymod-assetcss" data-cloak-anymod data-key="assetcss"></div>
        <div id="anymod-assetjs" data-cloak-anymod data-key="assetjs"></div>
        <div id="anymod-prioritymod" data-cloak-anymod data-key="prioritymod"></div>
        <div id="anymod-basic" data-cloak-anymod data-key="basic"></div>
        <div id="anymod-nonprioritymod" data-cloak-anymod data-key="nonprioritymod"></div>
      `;
    });

    it("when a non-priority mod's asset was already present on the page", (done) => {
      document.head.innerHTML += `
        <link rel="stylesheet" href="https://example.com/assetcss.css">
        <script defer src="https://example.com/assetjs.js"></script>`;
      Singleton.Opts.priority = ["prioritymod"];
      scriptTag = document.getElementById("AnyMod-script");
      styleTag = document.querySelector("[anymod-styles]");
      const preloadMockFn = jest.fn(),
        prioritymod = Test.factories.mods.buildPlainWithEid("prioritymod"),
        nonprioritymod = Test.factories.mods.buildPlainWithEid(
          "nonprioritymod"
        );
      prioritymod.cssAssets = Test.factories.mods.assetcss.cssAssets;
      prioritymod.jsAssets = Test.factories.mods.assetjs.jsAssets;
      nonprioritymod.cssAssets = Test.factories.mods.assetcss.cssAssets;
      nonprioritymod.jsAssets = Test.factories.mods.basic.cssAssets;
      const mods = {
        prioritymod,
        nonprioritymod,
        basic: Test.factories.mods.basic,
        assetcss: Test.factories.mods.assetcss,
        assetjs: Test.factories.mods.assetjs,
      };
      const Page = { mods };
      // Should add priority CSS & JS assets to head (and do nothing else)
      utils.loadPageAssets(Page, {
        priorityOnly: true,
        modCb: undefined,
        overallCb: preloadMockFn,
        scriptTag,
        styleTag,
        parent: Page,
      });
      Test.fns.fireAllOnloads(document);
      expect(document.head.innerHTML).toContain(mods.prioritymod.cssAssets[0]);
      expect(document.head.innerHTML).toContain(mods.prioritymod.jsAssets[0]);
      expect(document.head.innerHTML).toContain(mods.assetcss.cssAssets[0]);
      expect(document.head.innerHTML).toContain(mods.assetjs.jsAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.basic.cssAssets[0]);
      expect(document.head.innerHTML).not.toContain(mods.basic.jsAssets[0]);
      expect(preloadMockFn).toHaveBeenCalledTimes(1);
      // Mount priority mods, then load and mount non priority mods
      const overallCb = jest.fn();
      utils.loadPageAssets(Page, {
        modCb: mount,
        overallCb,
        scriptTag,
        styleTag,
        parent: Page,
      });
      const getElement = (key) => document.getElementById("anymod-" + key);
      // Priority mod & non priority mods with same assets should be mounted & uncloaked; others not
      Test.fns.fireAllOnloads(document);
      expect(getElement("prioritymod").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(
        getElement("nonprioritymod").getAttribute("data-cloak-anymod")
      ).toBe("");
      expect(getElement("assetcss").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(getElement("assetjs").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(getElement("basic").getAttribute("data-cloak-anymod")).toBe("");
      expect(getElement("prioritymod").innerHTML).toContain(
        "Hello prioritymod"
      );
      expect(getElement("assetcss").innerHTML).toContain("Hello, World!");
      expect(getElement("assetjs").innerHTML).toContain("Hello, World!");
      // Non priority mod should be mounted & uncloaked
      Test.fns.fireAllOnloads(document);
      expect(getElement("prioritymod").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(
        getElement("nonprioritymod").getAttribute("data-cloak-anymod")
      ).toBe(null);
      expect(getElement("assetcss").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(getElement("assetjs").getAttribute("data-cloak-anymod")).toBe(
        null
      );
      expect(getElement("basic").getAttribute("data-cloak-anymod")).toBe(null);
      expect(getElement("basic").innerHTML).toContain("Hello basic");
      expect(getElement("nonprioritymod").innerHTML).toContain(
        "Hello nonprioritymod"
      );
      done();
    });
  });
});
