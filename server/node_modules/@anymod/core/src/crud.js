import Singleton from "./singleton.js";

const crud = {};

const setHeaders = (xhr, additionalHeaders) => {
  xhr.setRequestHeader("Accept", "application/json, text/plain, */*");
  xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
  // Send different headers depending on whether the project is external or is AnyMod
  if (Singleton.External && Singleton.External.project) {
    // External project headers
    xhr.setRequestHeader("X-Page-Url", window.location.href);
    xhr.setRequestHeader("X-Tenant-Id", Singleton.External.project);
  } else {
    // AnyMod headers
    xhr.setRequestHeader("AnyMod-URL", window.location.href);
    xhr.setRequestHeader("AnyMod-Project", Singleton.Project);
  }
  if (additionalHeaders) {
    Object.keys(additionalHeaders).map((h) => {
      xhr.setRequestHeader(h, additionalHeaders[h]);
    });
  }
};

const sendRequest = (verb, url, data, additionalHeaders) => {
  return new Promise((resolve, reject) => {
    try {
      let xhr = new XMLHttpRequest();
      xhr.open(verb, url);
      setHeaders(xhr, additionalHeaders);
      xhr.onreadystatechange = () => {
        if (xhr.readyState == 4) {
          if (xhr.status == 200) return resolve(JSON.parse(xhr.responseText));
          reject(xhr.statusText);
        }
      };
      if (verb == "GET") {
        xhr.send();
      } else {
        const stringified = JSON.stringify(data || {});
        xhr.send(stringified);
      }
    } catch (err) {
      reject(err);
    }
  });
};

const getRequest = (url, additionalHeaders) =>
  sendRequest("GET", url, null, additionalHeaders);
const postRequest = (url, data) => sendRequest("POST", url, data);
const putRequest = (url, data) => sendRequest("PUT", url, data);

const getPreviewUuid = () => {
  if (!Singleton.Opts.preview) return false;
  try {
    if (document.cookie.indexOf("cio.preview") > -1) {
      return document.cookie.split("cio.preview=")[1].split(";")[0];
    }
  } catch (err) {}
  return false;
};

const urlStamp = () => {
  let stamp = window.location.pathname;
  try {
    return encodeURIComponent(btoa(stamp).replace(/=/g, ""))
      .split("")
      .reverse()
      .join("");
  } catch (err) {
    return encodeURIComponent(stamp);
  }
};

crud.get = () => {
  if (Singleton.Opts.api === false) return Promise.resolve({});
  const previewUuid = getPreviewUuid();
  const additionalHeaders = previewUuid
    ? { "AnyMod-Preview": previewUuid }
    : undefined;
  return getRequest(
    Singleton.ApiUrl + "page?anymod=" + urlStamp(),
    additionalHeaders
  );
};

crud.post = (explicitKeys) => {
  if (Singleton.Opts.api === false) return Promise.resolve({});
  if (Singleton.Opts.preview)
    throw new Error("Skipped post request: missing preview identifier");
  return postRequest(Singleton.ApiUrl + "page", { explicitKeys });
};

crud.put = (id, explicitKeys) => {
  if (Singleton.Opts.api === false) return Promise.resolve({});
  if (Singleton.Opts.preview)
    throw new Error("Skipped put request: missing preview identifier");
  return putRequest(Singleton.ApiUrl + "page/" + id, { explicitKeys });
};

export default crud;
