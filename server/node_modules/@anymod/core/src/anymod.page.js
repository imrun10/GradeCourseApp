/**
 * Terminology:
 *
 * PROCESS: page
 * - Insert a page's CSS & JS assets into the DOM
 *
 * PREPARE: el
 * - Adjust any attributes as needed to get ready to mount
 *
 * MOUNT: mod
 * - Insert a mod's cloaked HTML into the DOM (replace placeholder el)
 * - Insert a mod's CSS style tag into the DOM
 * - Evaluate a mod's JS
 *
 * UNCLOAK: mod
 * - Remove cloak (data-cloak-anymod) for all els associated with a mod
 *
 * CREATE: page
 * - Parse DOM to see what placeholder els are on page
 * - Perform POST request to create the page instance
 *
 * CHECK: page
 * - Compare remaining placeholder els for corresponding mod or error
 * - If new placeholder els, perform PUT request to update the page instance
 */

/**
 * For reference only.
 * This file defines the structure of Singleton.Page
 */

SingletonReference.Page = {
  page: {
    id: 1362,
    cssAssets: [],
    jsAssets: [],
    explicitKeys: [],
    implicitKeys: [],
    mods: {},
    errorMessages: {},
  },
  mountedModObjs: {
    "bobmm-1pe6d74": {
      instanceId: "bobmm-1pe6d74",
      key: "bobmm",
      mod: {
        key: "bobmm",
        cssAssets: [],
        jsAssets: [],
        data: {},
        html: "",
        css: "",
        js: "",
      },
      originalEl: `<div id="anymod-bobmm"></div>`,
    },
  },
  // Array of elements that are plain tags
  unmountedEls: [],
  // Array of mod data for mods that have not had assets loaded yet
  modsWithRemainingAssets: [
    {
      key: "anomm",
      remainingAssets: [],
    },
  ],
  // Array containing mod keys that have had all assets loaded
  modsWithoutRemainingAssets: [],

  // Loops over each mmo and applies cb function
  mapMmos: (cb) => {},
  // Returns an array of mmo ids
  mountedIds: () => {},
};
