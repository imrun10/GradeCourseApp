import Singleton from "./singleton.js";
import alias from "./alias.js";
import { evaluateJs } from "./mod.js.js";
import { uncloakByInstanceId } from "./mod.cloak.js";
import {
  querySelectorString,
  addDataKeyToEl,
  insertModHtmlAndCss,
} from "./mod.els.js";
import { isLegacy } from "./mod.utils.js";
import utils from "./utils.js";

const querySelectorStringUnmounted = () =>
  querySelectorString()
    .split(",")
    .map((a) => a + `:not([data-${alias.lowerCase}-mounted])`)
    .join(",");

/**
 * Scan the document for unmounted placeholder els, and add any matching
 * elements to the Singleton.Page.unmountedEls array
 */
const setUnmounted = () => {
  try {
    document;
  } catch (error) {
    return;
  }
  Singleton.Page.unmountedEls = [].slice.call(
    document.querySelectorAll(querySelectorStringUnmounted())
  );
  Singleton.Page.unmountedEls.map((el) => addDataKeyToEl(el));
};

/**
 * Create a mod based on mod data and insert it at placeholder tag location.
 * Add information on new mod to Singleton.Page.mountedModObjs object.
 *
 * @param {Element} el - unmodified placeholder tag
 * @param {Object} mod - mod data object used to initialize mod
 */
const mountModAtEl = (mod, el) => {
  utils.debugLog([`[${mod.key}] Begin mount`]);

  let instanceId = utils.createInstanceId(mod.key, "-live-");
  let originalEl = el.cloneNode();
  let isLegacyMod = isLegacy(mod.jsAssets);

  // Insert mod's CSS & cloaked HTML into the DOM
  let newEl = insertModHtmlAndCss(el, mod, instanceId);

  // Evaluate mod's JS
  evaluateJs(newEl, mod, instanceId, isLegacyMod);

  // Uncloak mods with this
  uncloakByInstanceId(instanceId);

  Singleton.Page.mountedModObjs[instanceId] = {
    key: mod.key,
    instanceId,
    originalEl,
    mod,
  };
  return newEl;
};

const mountExplicitEls = (mod) => {
  const els = document.querySelectorAll(
    `[data-key="${mod.key}"]:not([data-${alias.lowerCase}-mounted])`
  );
  for (let i = 0; i < els.length; i++) {
    mountModAtEl(mod, els[i]);
  }
};

/**
 * Iterate over and mount all relevant placeholders for a given mod
 *
 * @param {Object} mod - mod data object used to initialize mod
 */
const mount = (mod) => {
  if (!mod || !mod.key) return;
  mountExplicitEls(mod);
};

export { mount, mountModAtEl, setUnmounted };
