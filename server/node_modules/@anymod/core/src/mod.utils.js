import Singleton from "./singleton.js";
const legacyPath = "anymod.legacy.vue-axios.js";

/**
 * Clones and returns an object
 *
 * @param {Object} obj
 */
const cloneObject = (obj) => {
  if (typeof obj === "undefined") return {};
  return JSON.parse(JSON.stringify(obj));
};

/**
 * Converts a string from kebab-case to camelCase
 *
 * @param {String} str
 */
const kebabToCamel = (str) => {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
};

/**
 * Determine whether a jsAssets array contains the legacy script
 *
 * @param {Array} jsAssets
 */
const isLegacy = (jsAssets) => {
  if (!jsAssets || jsAssets.length < 1) return false;
  for (let i = 0; i < jsAssets.length; i++) {
    if (jsAssets[i].indexOf(legacyPath) > -1) return true;
  }
  return false;
};

/**
 * Generate a new Cloudinary url
 *
 * @param {String} url - string for Cloudinary image url
 * @param {Object} opts - c (crop), w (width), h (height), g (gravity)
 */
const buildImage = (url, opts) => {
  opts = opts || {};
  try {
    if (!opts.c) {
      opts.c = "limit";
      if (opts.w || opts.h) opts.c = "scale";
      if (opts.w && opts.h) opts.c = "fit";
    }
    if (opts.c === "limit" && !opts.w && !opts.h) opts.w = 1200;
    if (
      opts.g === "face" &&
      opts.c !== "crop" &&
      opts.c !== "thumb" &&
      opts.c !== "lfill"
    )
      opts.c = "fill";
    if (!url) {
      url = "https://placeholdit.imgix.net/~text?w=" + opts.w;
      if (opts.h) url += "&h=" + opts.h;
    } else if (url.indexOf("image/upload") > -1) {
      let regex = /\/v\d{8,12}\//g,
        id = url.match(regex)[0],
        slug = "/c_" + opts.c;
      if (opts.w) slug += ",w_" + opts.w;
      if (opts.h) slug += ",h_" + opts.h;
      if (opts.g) slug += ",g_" + opts.g;
      return url.split(regex).join(slug + id);
    }
    return url;
  } catch (err) {
    return url;
  }
};

/**
 * Return modObj.mod for a given eid
 *
 * @param {String} eid
 */
const modDataFromEid = (eid) => {
  try {
    let ids = Singleton.Page.mountedIds();
    for (var i = 0; i < ids.length; i++) {
      let mmo = Singleton.Page.mountedModObjs[ids[i]];
      if (mmo.key === eid) return mmo.mod;
    }
  } catch (err) {}
  if (eid) console.warn(`Mod not found: ${eid}`);
  return {};
};

export { cloneObject, kebabToCamel, buildImage, modDataFromEid, isLegacy };
