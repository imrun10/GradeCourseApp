import Singleton from "./singleton.js";
import alias from "./alias.js";
import { buildImage, cloneObject, kebabToCamel } from "./mod.utils.js";
import utils from "./utils.js";

const recaptchaKey = "6LfRih4UAAAAALFsu6ztXQ-bozaU0UuapEee8-Fw";

/**
 * Evaluate a mod's js string in its Singleton
 *
 * @param {Object} mod - mod object to reference
 * @param {String} js - javascript to evaluate
 */
function evaluateInScope(mod, js) {
  "use strict";
  try {
    // Overwrite mod html, css, and data with current version
    const { html, css, data } = utils.getCurrentModVersion(mod);
    mod.html = html;
    mod.css = css;
    mod.data = data;
    // Legacy 12 Jul 2018
    mod.data.modKey = mod.key;
    mod.data.componentKey = mod.key;
    // Define function to call, and call it
    const fn = Function("mod", `;"use strict";var scope=mod;${js}`);
    fn(mod);
  } catch (err) {
    console.warn(`Problem evaluating mod JS [${mod && mod.key}]:`, err);
  }
}

/**
 * Add `data-` attributes other than `data-anymod`
 *
 * @param {Object} mod
 * @param {Element} el
 */
const importProps = (mod, el) => {
  try {
    for (let i = 0; i < el.attributes.length; i++) {
      let attr = el.attributes[i];
      if (
        attr.name &&
        attr.name.indexOf("data-") === 0 &&
        attr.name.indexOf(`data-${alias.lowerCase}`)
      ) {
        mod.data[
          kebabToCamel(attr.name.replace("data-", ""))
        ] = el.getAttribute(attr.name);
      }
    }
  } catch (err) {}
};

/**
 * Add key/value pairs from mod.data directly to mod as well
 * e.g. mod.data.myField --> mod.myField
 *
 * @param {Object} mod
 */
const addDataKeysToModBase = (mod) => {
  let keysToAdd = Object.keys(mod.data);
  keysToAdd.map((key) => {
    if (!mod.hasOwnProperty(key)) mod[key] = mod.data[key];
  });
};

/**
 * Returns the object that should be used for mod.external within the mod
 * @param {Object} modObj
 */
const getExternal = (modObj) => {
  try {
    const external = cloneObject(modObj.external);
    if (!external) return { project: null };
    // For the demo site, which uses the 'master' mods, return whatever is project defined on the page
    if (external.project === "master") {
      return {
        name: external.name,
        project:
          (Singleton && Singleton.External && Singleton.External.project) ||
          "master",
      };
    }
    return external;
  } catch (err) {
    return { project: null };
  }
};

/**
 * Assign variables and evaluate a mod's JS in proper scope
 *
 * @param {Element} el - HTML element containing the mod
 * @param {Object} modObj - mod object based on mod's fields
 * @param {String} instanceId - mod's instance id, e.g. abcde-vc7k65e
 */
const evaluateJs = (el, modObj, instanceId, isLegacyMod) => {
  utils.debugLog([`[${modObj.key}] Evaluate JS`]);

  try {
    let mod = {
      el,
      key: modObj.key,
      instanceId,
      selector: `[data-${alias.lowerCase}="${instanceId}"]`,
      data: cloneObject(modObj.data) || {},
      external: getExternal(modObj),
      versions: cloneObject(modObj.versions) || {},
    };
    mod.data.recaptchaKey = recaptchaKey;

    importProps(mod, el);
    addDataKeysToModBase(mod);
    evaluateInScope(mod, modObj.js);
    // Legacy 12 Jul 2018
    mod.data.modKey = modObj.key;
    mod.data.componentKey = modObj.key;

    // Legacy mods run Vue init code after JS
    if (!!Singleton.Vue && isLegacyMod) {
      mod.methods = mod.methods || {};
      mod.methods.buildImage = buildImage;
      mod.el = mod.selector;
      new Singleton.Vue(mod);
    }
  } catch (err) {
    console.warn("Problem evaluating mod JS", err);
  }
};

export { evaluateJs };
