{"version":3,"file":"userfront-core.module.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/refresh.js","../src/authentication.js","../src/session.js","../src/pkce.js","../src/url.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/saml.js","../src/signup.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJwtPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\n/**\n * Client-side check:\n * Determine whether the given JWT is present and unexpired\n *\n * @param {String} token JSON Web Token\n * @returns {Boolean}\n */\nexport function isJwtLocallyValid(token) {\n  try {\n    // Must be present\n    if (!token) {\n      return false;\n    }\n\n    // Must not be expired\n    const payload = getJwtPayload(token);\n    return new Date(payload.exp * 1000) > new Date();\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n\nexport function isBrowser() {\n  return typeof window !== \"undefined\";\n}","import { store } from \"./store.js\";\nimport { getJwtPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJwtPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\nimport { isJwtLocallyValid } from \"./utils.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Client-side check:\n * Determine whether the access token is present and unexpired\n * @returns {Boolean}\n */\nexport function isAccessTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.accessToken);\n}\n\n/**\n * Client-side check:\n * Determine whether the refresh token is present and unexpired\n * @returns {Boolean}\n */\nexport function isRefreshTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.refreshToken);\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { store } from \"./store.js\";\n\n// Data specific to the MFA service\nexport const authenticationData = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null,\n};\n\n/**\n * Set authenticationData.firstFactors from the authentication object\n * @param {Object} authentication\n * {\n *   firstFactors,\n *   secondFactors\n * }\n * @returns\n */\nexport function setFirstFactors(authentication) {\n  // If we're not initialized, there are no first factors.\n  if (!store.tenantId) {\n    console.warn(\n      \"setFirstFactors: tried to set factors without a tenantId set.\"\n    );\n    return;\n  }\n  // If we're passed an invalid argument, keep the authentication data as is.\n  if (\n    !authentication ||\n    typeof authentication !== \"object\" ||\n    !Array.isArray(authentication.firstFactors)\n  ) {\n    console.warn(\"setFirstFactors: invalid factors passed.\");\n    return;\n  }\n  authenticationData.firstFactors = authentication.firstFactors;\n}\n\n/**\n * Check if MFA is required for the ongoing signup or login flow.\n * @returns {Boolean} true if MFA is currently required\n */\nexport function isMfaRequired() {\n  return !!authenticationData.firstFactorToken;\n}\n\n/**\n * Update the MFA service state given a response to a signup or login call.\n * Adds secondFactors and firstFactorToken if it is a MFA Required response,\n * removes them if it is a successful signup or login,\n * leaves the service unchanged otherwise.\n * @param {Object} response\n */\nexport function handleMfaRequired(response) {\n  if (!response.isMfaRequired) {\n    // If we've logged in or signed up successfully,\n    // clear the MFA service state.\n    if (response.message === \"OK\") {\n      clearMfa();\n    }\n    return;\n  }\n  authenticationData.secondFactors = response.authentication.secondFactors;\n  authenticationData.firstFactorToken = response.firstFactorToken;\n}\n\n/**\n * If MFA is required, returns a headers object with authorization set to the firstFactorToken.\n * Otherwise, returns an empty object.\n * @returns {Object} a headers object with MFA authorization header set, or empty if MFA is not required\n */\nexport function getMfaHeaders() {\n  if (authenticationData.firstFactorToken) {\n    return {\n      authorization: `Bearer ${authenticationData.firstFactorToken}`,\n    };\n  }\n  return {};\n}\n\n/**\n * Clears the current transient state of the MFA service,\n * leaving the tenant's persistent state in place.\n */\nexport function clearMfa() {\n  authenticationData.secondFactors = [];\n  authenticationData.firstFactorToken = null;\n}\n\n/**\n * Fully resets the MFA service, including the tenant's persistent state,\n * to it uninitialized state.\n */\nexport function resetMfa() {\n  clearMfa();\n  authenticationData.firstFactors = [];\n}\n","import {\n  isAccessTokenLocallyValid,\n  isRefreshTokenLocallyValid,\n} from \"./tokens.js\";\nimport {\n  authenticationData,\n  isMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { refresh } from \"./refresh.js\";\n\n/**\n * Determine whether a user is logged in by checking their\n * JWT access token and, if invalid, refreshing it and checking\n * again.\n * @returns {Promise<Boolean>}\n */\nasync function getIsLoggedIn() {\n  try {\n    // If the access token is locally valid, return true\n    if (isAccessTokenLocallyValid()) {\n      return true;\n    }\n\n    // If the refresh token is locally invalid, return false\n    if (!isRefreshTokenLocallyValid()) {\n      return false;\n    }\n\n    // Attempt to refresh the access token\n    await refresh();\n\n    // The access token should now be valid\n    return isAccessTokenLocallyValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Return detailed information about the current session.\n * @returns {Promise<Object>}\n */\nexport async function getSession() {\n  const isLoggedIn = await getIsLoggedIn();\n  return {\n    isLoggedIn,\n    needsSecondFactor: isMfaRequired(),\n    firstFactors: authenticationData.firstFactors,\n    secondFactors: authenticationData.secondFactors,\n    resetMfaState: clearMfa,\n  };\n}\n","import { getQueryAttr } from \"./url.js\";\nimport { isBrowser } from \"./utils.js\";\n\nexport const store = {\n  codeChallenge: \"\",\n  get usePkce() {\n    return !!store.codeChallenge;\n  }\n}\n\n/**\n * Reads an unexpired challenge code from local storage\n * @returns {string?} the challenge code, if an unexpired one is in local storage\n */\nexport function readPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallenge = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n  if (codeChallenge) {\n    const expiresAt = window.localStorage.getItem(\"uf_pkce_code_challenge_expiresAt\");\n    if (expiresAt && (parseInt(expiresAt, 10) > Date.now())) {\n      return codeChallenge;\n    }\n  }\n}\n\n/**\n * Write a challenge code to local storage, expiring in 5 minutes\n * @param {string} codeChallenge \n * @returns \n */\nexport function writePkceDataToLocalStorage(codeChallenge) {\n  if (!isBrowser()) {\n    return;\n  }\n  if (!codeChallenge) {\n    return clearPkceDataFromLocalStorage();\n  }\n  store.codeChallenge = codeChallenge;\n  const expiresAt = (Date.now() + 1000 * 60 * 5); // 5 minutes from now\n  try {\n    window.localStorage.setItem(\"uf_pkce_code_challenge\", codeChallenge);\n    window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", expiresAt);\n  } catch (err) {\n    // Suppress exception from full local storage\n  }\n}\n\n/**\n * Clear the challenge code and expiration from local storage\n */\nexport function clearPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  window.localStorage.removeItem(\"uf_pkce_code_challenge\");\n  window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\");\n}\n\n/**\n * Set up the PKCE service: look for a PKCE challenge code in\n * query params or local storage. If both are present, the query\n * param is preferred.\n * @returns {Boolean} true if we should use PKCE in our auth requests\n */\nexport function setupPkce() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallengeFromQueryParams = getQueryAttr(\"code_challenge\");\n  if (codeChallengeFromQueryParams) {\n    store.codeChallenge = codeChallengeFromQueryParams;\n    writePkceDataToLocalStorage(codeChallengeFromQueryParams);\n    return true;\n  }\n  const codeChallengeFromLocalStorage = readPkceDataFromLocalStorage();\n  if (codeChallengeFromLocalStorage) {\n    store.codeChallenge = codeChallengeFromLocalStorage;\n    return true;\n  }\n  clearPkceDataFromLocalStorage();\n  return false;\n}\n\n/**\n * Get (possibly empty) PKCE query params to attach to an auth request\n * @returns {object} an object to be used for an Axios request's params field\n */\nexport function getPkceRequestQueryParams() {\n  if (!store.usePkce) {\n    return {};\n  }\n  return { \"code_challenge\": store.codeChallenge };\n}\n\n/**\n * Redirect to url with PKCE query params (authorization_code) set. Does not redirect\n * if url or authorizationCode are falsy.\n * \n * @param {string} url full URL to redirect to (may be a deep link for a mobile app)\n * @param {string} authorizationCode the authorization code received from the server\n * @returns \n */\nexport function redirectWithPkce(url, authorizationCode) {\n  if (!url || !authorizationCode) {\n    return;\n  }\n  if (!store.usePkce) {\n    console.warn(\"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\")\n  }\n  const _url = new URL(url);\n  _url.searchParams.set(\"authorization_code\", authorizationCode);\n  clearPkceDataFromLocalStorage();\n  window.location.assign(_url.href);\n}","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { getSession } from \"./session.js\";\nimport { store as pkceStore } from \"./pkce.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const handleRedirect = ({ redirect, data }) => {\n  if (redirect === false) return;\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's After-login path.\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  const { isLoggedIn } = await getSession();\n  if (!isLoggedIn) {\n    return removeAllCookies();\n  }\n\n  // TODO see #130: can handle this more elegantly once we have an exchange tokens -> authorizationCode\n  // endpoint on the server.\n  // If this is a PKCE auth session, don't redirect with this function ever.\n  // The only way to get an authorizationCode currently is to go through an auth flow.\n  // The PKCE module handles redirect after a PKCE Required response is received.\n  if (pkceStore.usePkce) {\n    return;\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * If the access token is invalid, redirect the browser to the\n * provided path.\n */\nexport async function redirectIfLoggedOut({ redirect } = {}) {\n  // If the user is logged in, return without doing anything\n  const { isLoggedIn } = await getSession();\n  if (isLoggedIn) {\n    return;\n  }\n\n  // Remove all cookies\n  removeAllCookies();\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no redirect path was provided, do not redirect\n  return;\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { exchange } from \"./refresh.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/create`,\n      {\n        tenantId: store.tenantId,\n        username,\n        name,\n        email,\n        password,\n        data: userData,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n    if (data.tokens) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    } else if (data.firstFactorToken) {\n      handleMfaRequired(data);\n      return data;\n    } else if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} params\n * @param {string} params.email The user's email. One of email/username/emailOrUsername should be present.\n * @param {string} params.username The user's username. One of email/username/emailOrUsername should be present.\n * @param {string} params.emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @param {string} params.password\n * @param {string | boolean} params.redirect \n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @param {object} params.options\n * @param {boolean} params.options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n * \n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  options\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true\n      }\n    }\n    const { data } = await post(\n      `/auth/basic`,\n      body,\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // TODO this is neither valid nor invalid\n      }\n    }\n\n    throw new Error(\"Please try again.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({ uuid, token, password, redirect });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({ uuid, token, password, redirect });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\n      \"/auth/link\",\n      {\n        token,\n        uuid,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams()\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(`/auth/code`, {\n      channel,\n      email,\n      phoneNumber,\n      name,\n      username,\n      data,\n      tenantId: store.tenantId,\n    }, {\n      headers: getMfaHeaders()\n    });\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(\n      `/auth/code`,\n      {\n        channel,\n        verificationCode,\n        email,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  isMfaRequired,\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n\n    const { data } = await post(\n      `/auth/totp`,\n      {\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (isMfaRequired()) {\n      const { data } = await get(`/auth/totp`, {\n        headers: getMfaHeaders(),\n      });\n      return data;\n    }\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { handleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    handleRedirect({ redirect, data });\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   handleRedirect({ redirect, data });\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { setFirstFactors } from \"./authentication.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n * and the tenant's authentication factors\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n    setFirstFactors(data.authentication);\n    return data;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJwtPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJwtPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { getSession } from \"./session\";\nimport { redirectIfLoggedIn, redirectIfLoggedOut } from \"./url.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\nimport { resetMfa } from \"./authentication.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n\n  // Estimate the mode synchronously with local data.\n  // Clients that require the true mode or the default\n  // authenticationData should call and await setMode.\n  setModeSync();\n\n  resetMfa();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // session\n  getSession,\n\n  // url\n  redirectIfLoggedIn,\n  redirectIfLoggedOut,\n\n  // user\n  user,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {Number} userId\n * @param {String} userUuid\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} phoneNumber\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} totpCode\n * @param {String} backupCode\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} verificationCode\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n  options,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  setupPkce();\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        options,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} phoneNumber\n * @param {String} name\n * @param {Object} data - Object for custom user fields\n * @param {String} password\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n} = {}) {\n  setupPkce();\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n"],"names":["store","user","tokens","mode","getJwtPayload","token","encodedPayload","split","replace","JSON","parse","atob","error","console","isJwtLocallyValid","payload","Date","exp","throwFormattedError","_error$response","response","_error$response$data","data","message","window","reduceSlashes","str","put","path","options","url","baseUrl","axios","e","Promise","reject","post","get","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","name","paths","domains","location","pathname","hostname","primaryDomain","slice","join","undefined","err","map","domain","remove","removeCookie","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","access","cookieOptions","id","refresh","setTokensFromCookies","body","recover","result","then","exchange","resolve","_temp","_catch","headers","authorization","status","Error","setCookiesAndTokens","basicRefresh","warn","tokenName","setUser","idTokenPayload","propsToDefine","prop","isAccessTokenLocallyValid","authenticationData","firstFactors","secondFactors","firstFactorToken","handleMfaRequired","isMfaRequired","authentication","clearMfa","getMfaHeaders","getSession","getIsLoggedIn","isLoggedIn","needsSecondFactor","resetMfaState","codeChallenge","usePkce","clearPkceDataFromLocalStorage","isBrowser","localStorage","removeItem","setupPkce","getQueryAttr","codeChallengeFromQueryParams","writePkceDataToLocalStorage","now","setItem","expiresAt","codeChallengeFromLocalStorage","getItem","parseInt","readPkceDataFromLocalStorage","getPkceRequestQueryParams","code_challenge","redirectWithPkce","authorizationCode","_url","searchParams","assign","href","attrName","indexOf","decodeURIComponent","handleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","el","createElement","hash","search","updatePasswordWithJwt","password","existingPassword","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","getProviderLink","origin","encodeURIComponent","sendPasswordlessLink","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","privateIPRegex","setMode","setFirstFactors","reason","getReason","Array","isArray","setModeSync","modeValue","isTestHostname","hn","match","isHttps","protocol","update","Object","keys","length","hasRole","roleName","roles","getTotp","_exit2","_temp4","_result3","_temp3","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","_temp2","userUuid","completeSamlLogout","removeAllCookies","a","b","c","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","loginWithPassword","noResetEmail","params","hasOwnProperty","_exit","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","pkceStore","tenant","loginRedirectPath","redirectIfLoggedOut"],"mappings":"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"}