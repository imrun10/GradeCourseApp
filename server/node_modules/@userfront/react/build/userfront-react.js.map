{"version":3,"file":"userfront-react.js","sources":["../src/index.js"],"sourcesContent":["import React, { memo } from \"react\";\nimport AnyMod from \"@anymod/core\";\nimport Core from \"@userfront/core\";\n\nconst {\n  Singleton,\n  alias,\n  render,\n  processPage,\n  addScript1ToDocument,\n  createOrReturnPage,\n  checkPageAndUpdate,\n  executeCallbacks,\n  logErrorsAndTips,\n} = AnyMod;\n\nconst { registerUrlChangedEventListener, addInitCallback } = Core;\nalias.setAlias(\"Userfront\");\n\nSingleton.Opts.api = true;\n\n/**\n * The order of operations is:\n *  1. Userfront.init() is called\n *  2. Callback is fired that adds Script1 to document and sets Singleton.isScript1Loading = true\n *  3. Userfront.build() is called\n *  4. componentDidMount() is called\n *  5. mountTools() is called\n *  6a. If Script1 hasn't loaded yet, wait for it to load\n *  6b. If Script1 has loaded, continue\n *  7. runAnyModSetup() is called\n */\n\n// Callback to fire whenever Userfront.init is called\naddInitCallback(({ tenantId }) => {\n  Singleton.External.project = tenantId;\n  addScript1ToDocument(\n    \"https://cdn.userfront.com/toolkit/page/\",\n    tenantId,\n    runAnyModSetup\n  );\n});\n\nregisterUrlChangedEventListener();\n\nif (typeof window === \"object\") {\n  window.addEventListener(\"urlchanged\", render);\n}\n\nasync function runAnyModSetup() {\n  if (Singleton.isScript1Loading) return;\n  const page = await createOrReturnPage();\n  const updatedPage = await checkPageAndUpdate(page);\n  await processPage(updatedPage);\n  executeCallbacks();\n  logErrorsAndTips();\n}\n\nasync function mountTools() {\n  try {\n    runAnyModSetup();\n  } catch (err) {\n    let message = err && err.message ? err.message : \"Problem loading page\";\n    console.warn(message, err);\n  }\n}\n\nconst Userfront = {\n  build({ toolId }) {\n    class Anon extends React.Component {\n      componentDidMount() {\n        mountTools();\n      }\n      render() {\n        return (\n          <div>\n            <div id={`userfront-${toolId}`}></div>\n          </div>\n        );\n      }\n    }\n    return memo(Anon);\n  },\n  /**\n   * This is the hook way to do it, which we're not\n   * using because it's not compatible with older\n   * versions of React.\n   */\n  // hook({ tenantId, toolId }) {\n  //   return function Anon() {\n  //     useEffect(() => {\n  //       mount();\n  //     });\n  //     return (\n  //       <div>\n  //         <div id={`userfront-${toolId}`}></div>\n  //       </div>\n  //     );\n  //   };\n  // },\n};\n\nfor (const attr in Core) {\n  if (!Userfront[attr]) Userfront[attr] = Core[attr];\n}\n\nexport default Userfront;\n"],"names":["Singleton","isScript1Loading","createOrReturnPage","page","checkPageAndUpdate","updatedPage","processPage","executeCallbacks","logErrorsAndTips","alias","render","addScript1ToDocument","AnyMod","registerUrlChangedEventListener","addInitCallback","Core","setAlias","Opts","api","tenantId","External","project","runAnyModSetup","window","addEventListener","build","toolId","Component","componentDidMount","err","console","warn","message","mountTools","React","id","memo","Anon","Userfront","attr"],"mappings":"wLAkDE,OAAIA,EAAUC,mDACKC,mBAAbC,0BACoBC,EAAmBD,kBAAvCE,0BACAC,EAAYD,oBAClBE,IACAC,+CAnDIR,UACJA,EADIS,MAEJA,EAFIC,OAGJA,EAHIJ,YAIJA,EAJIK,qBAKJA,EALIT,mBAMJA,EANIE,mBAOJA,EAPIG,iBAQJA,EARIC,iBASJA,GACEI,GAEEC,gCAAEA,EAAFC,gBAAmCA,GAAoBC,EAC7DN,EAAMO,SAAS,aAEfhB,EAAUiB,KAAKC,KAAM,EAerBJ,EAAgB,EAAGK,SAAAA,MACjBnB,EAAUoB,SAASC,QAAUF,EAC7BR,EACE,0CACAQ,EACAG,KAIJT,IAEsB,yBACpBU,OAAOC,iBAAiB,aAAcd,GAqBxC,QAAkB,CAChBe,OAAMC,OAAEA,IACN,kBAAyBC,UACvBC,oCAXJ,IACEN,IACA,MAAOO,GAEPC,QAAQC,KADMF,GAAOA,EAAIG,QAAUH,EAAIG,QAAU,uBAC3BH,wDAQlBI,GAEFvB,SACE,OACEwB,2BACEA,uBAAKC,GAAK,aAAYT,MAK9B,OAAOU,OAAKC,KAqBhB,IAAK,aACEC,EAAUC,KAAOD,EAAUC,GAAQxB,EAAKwB"}